name: Build & Deploy (Docker over SSH)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE: ghcr.io/${{ github.repository }}
  CONTAINER_NAME: citizenship-tracker
  INTERNAL_PORT: 3000
  PUBLIC_PORT: 80

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        run: |
          TAG=${GITHUB_SHA::7}
          docker build -t $IMAGE:$TAG .
          docker tag $IMAGE:$TAG $IMAGE:latest
          docker push $IMAGE:$TAG
          docker push $IMAGE:latest
        shell: bash

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            TAG=${GITHUB_SHA::7}
            APP_PATH=${{ secrets.APP_PATH }}
            IMAGE="${{ env.IMAGE }}:${TAG}"
            NAME="${{ env.CONTAINER_NAME }}"
            INT=${{ env.INTERNAL_PORT }}
            PUB=${{ env.PUBLIC_PORT }}

            mkdir -p "$APP_PATH/data"

            # Login to GHCR for pull
            docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

            # Pull new image
            docker pull "$IMAGE"

            # Stop/remove old container if it exists
            if [ "$(docker ps -aq -f name=^${NAME}$)" ]; then
              docker rm -f "$NAME" || true
            fi

            # Run the new container
            docker run -d \
              --name "$NAME" \
              --restart unless-stopped \
              --env-file "$APP_PATH/.env" \
              -p "${PUB}:${INT}" \
              -v "$APP_PATH/data:/usr/src/app/src/data" \
              "$IMAGE"

            # Optional cleanup
            docker image prune -f
