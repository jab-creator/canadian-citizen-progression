name: Build & Deploy with HTTPS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE: ghcr.io/${{ github.repository }}
  COMPOSE_PROJECT: citizenship-tracker

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push image
        run: |
          TAG=${GITHUB_SHA::7}
          docker build -t $IMAGE:$TAG .
          docker tag $IMAGE:$TAG $IMAGE:latest
          docker push $IMAGE:$TAG
          docker push $IMAGE:latest

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e

            # Navigate to deployment directory
            cd /opt/citizenship-tracker || { echo "Deployment directory not found. Please run initial setup first."; exit 1; }

            # Login to container registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            # Pull latest images
            docker compose -f docker-compose.prod.yml pull citizenship-tracker

            # Deploy with zero-downtime using docker compose
            docker compose -f docker-compose.prod.yml up -d --no-deps citizenship-tracker

            # Wait for health check
            echo "Waiting for application to be healthy..."
            timeout=60
            while [ $timeout -gt 0 ]; do
              if curl -f http://localhost:8000 >/dev/null 2>&1; then
                echo "Application is healthy!"
                break
              fi
              echo "Waiting for application... ($timeout seconds remaining)"
              sleep 5
              timeout=$((timeout - 5))
            done

            if [ $timeout -le 0 ]; then
              echo "Application failed to become healthy within 60 seconds"
              docker compose -f docker-compose.prod.yml logs citizenship-tracker
              exit 1
            fi

            # Reload nginx to ensure it picks up any changes
            docker compose -f docker-compose.prod.yml exec nginx nginx -s reload

            # Clean up old images
            docker image prune -f

            echo "Deployment completed successfully!"
